""""""""""""""""""""""""""""""""
Devlopment Log
""""""""""""""""""""""""""""""""

********************************
To Checkout 
********************************

RCU skip list -> move all Heca space and Heca process to skip list rather than radix tree 
http://lwn.net/Articles/551896/

Queued Read Write lock -> Might be better in certain situatio in Heca rather than standard lock or RW lock.
http://lwn.net/Articles/558867/



*******************************
TODO 
*******************************

=> Evaluate the move Heca Space and Proces to RCU skip list from radix tree :
	Low write - modification ratio vs Read -> allow faster lookup  due to lockless behavior as well as less space wasted. 
	Is it worth it, the radix tree might provide a better structure for grabing structure and refcounting ?

=> Clean up and refactor the surrogate code when we delete hprocs , its really messy and not 100% sure it works well

=> Cleanup the heca connection manager code to handle all teh error 

=> add multi RDMA NIC support 


=> Move all the Heca space - Heca Process - Heca State - MR into Kobjects 
	This will also allow us to support the hotplug event 

=> Split Memory Hooks - Connection manager and Memory Management in different modules 

*******************************
CODE Comments
*******************************

20/08/2013

base.c :  

 Heca Connection : RB tree + sequential lock => we need to check how many time we do the lookup and maybe swith to a lockless DT .. => thisis definitly a use case for skip list ! 

 Heca Space : Radix Tree + rcu => evaluate if skip list make more sense .. Not rcu radix tree allow concurrent lockless read but single writer... 

the surrogate push pull for freeing hproc is messy, this need to be cleaned up 

27/08/2013

destroy_hcm_listener : we destroy the HCM even if we have hspace left.. need to be fixed ..  


30/08/2013

conn.c : line 1749 - remove_hprocs_from_conn : we need to maybe teardown teh hspace and also make sure we cleanup properly under mutex 

01/09/2013 
stuct.c : heca page get ( line 344 ) => use krefs rather than the custom implementation 
move the descriptor variable within the Heca module state 



**********************************
Out of order
**********************************


_ Checkout the congestion code

_ Heca hooks teh detach task and attach code needs to  be reviewed 

_ check if we have disconnection and tear down of hproc at the same time => we might have a race condition on the teardown side there ( work from hmr up... we might need to introduce lock there) 

_ do we need to move the hrpoc refcount to per MR refcount ? 

